trigger:
- '*'

variables:
 - group: git-secure
 - name: buildConfiguration
   value: 'Release'

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool: 'Default'
    

    variables:      
      #dotnetSdkVersion: '3.1.100'
      dotnetSdkVersion: '2.2.x'

    steps:
#    - task: UseDotNet@2
#      displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
#      inputs:
#        version: '$(dotnetSdkVersion)'

    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false

    - script: 'git config --list'
      displayName: 'Denote Security User'

    - script: 'echo $(git-username)'
      displayName: 'Denote Future Security User'

    - script: 'git config user.name $(git-username)'
      displayName: 'Set new git username'

    - script: 'git config user.password $(git-pass)'
      displayName: 'Set new git password'
      
    - script: 'git tag $(Build.BuildNumber)'
      displayName: 'Add Git Tag for Build Number'

    # tag the current branch with the version number
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          git tag $(GitVersion.NuGetVersion)
          Write-Host "Successfully created tag $(GitVersion.NuGetVersion)" 

    # push created tag to origin
    # NOTE: you need to set 'persistCredentials: true' in the checkout task. Otherwise git will fail with error code 1.
    # NOTE: You cannot run both "git tag xyz" AND "git push --task" in the same powershell command. If you do, git will fail with error code 1
    # NOTE: IF you get an error from this git command, make sure, that your build user has the required permissions!
    #       In our case, the build agent needs the additional permissions for "bypass policies when pushing" and "bypass policies when completing pull requests"
    #       because we have a custom policy in place. (See: https://opti-q.visualstudio.com/<your_project_name>/_settings/repositories)
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          git push --tags
          Write-Host "Successfully pushed tag $(GitVersion.NuGetVersion) to origin" 

    - script: 'echo "<h1>Release notes for build  $(Build.DefinitionName)</h1>  <b>Build Number</b>  : $(Build.BuildNumber)   <br> $(Build.BuildId) "> buildinfo.html'
      displayName: 'Write build info'
      workingDirectory: $(Build.ArtifactStagingDirectory)



    - task: XplatGenerateReleaseNotes@2
      inputs:
        outputfile: '$(Build.ArtifactStagingDirectory)\build-notes.md'
        templateLocation: 'InLine'
        inlinetemplate: |
          # Release notes 
          **Build Number**  : ${buildDetails.buildNumber} 
          **Build started** : ${buildDetails.startTime}  
          **Source Branch** : ${buildDetails.sourceBranch}  

          ### Associated work items  
          @@WILOOP@@  
          * ** ${widetail.fields['System.WorkItemType']} ${widetail.id} ** Assigned by: ${widetail.fields['System.AssignedTo']}  ${widetail.fields['System.Title']}  
          @@WILOOP@@  

          ### Associated commits
          @@CSLOOP@@  
          * ** ID ${csdetail.id} ** Commited by:  ${csdetail.author.displayName} (${csdetail.author.uniqueName}) ${csdetail.message}
          @@CSLOOP@@
        delimiter: ':'
        fieldEquality: '='
        anyFieldContent: '*'
          
    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'



 #Below are deployment stages
- stage: 'Dev'
  displayName: 'Deploy to the dev environment'
  dependsOn: Build
  jobs:
  - deployment: Deploy
    pool: Default
    environment: dev

    strategy:
      runOnce:
        deploy:
          steps:
          - script: whoami
          - download: current
            artifact: drop
          - task: git-branch-on-release-task@9
            inputs:
              branchFolder: 'DEV'
              staticTagName: 'DEV-$(Build.BuildNumber)'



- stage: 'Test'
  displayName: 'Deploy to the test environment'
  dependsOn: Dev
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-16.04'
    environment: test
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: git-branch-on-release-task@9
            inputs:
              branchFolder: 'TEST'
              staticTagName: 'TEST-$(Build.BuildNumber)'


- stage: 'Staging'
  displayName: 'Deploy to the staging environment'
  dependsOn: Test
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-16.04'
    environment: staging
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: git-branch-on-release-task@9
            inputs:
              branchFolder: 'STAGING'
              staticTagName: 'STAGING-$(Build.BuildNumber)'
