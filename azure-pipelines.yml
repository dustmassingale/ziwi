trigger:
- '*'

variables:
  buildConfiguration: 'Release'

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool: 'Default'
    

    variables:      
      #dotnetSdkVersion: '3.1.100'
      dotnetSdkVersion: '2.2.x'

    steps:
#    - task: UseDotNet@2
#      displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
#      inputs:
#        version: '$(dotnetSdkVersion)'

    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false


    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(System.DefaultWorkingDirectory)

    - task: XplatGenerateReleaseNotes@2
      inputs:
        outputfile: '$(Build.ArtifactStagingDirectory)\release-notes.htm'
        templateLocation: 'InLine'
        inlinetemplate: |
          <h1>Release notes for build $defname</h1>
                    <b>Build Number</b>  : ${$build.buildnumber}    <br>
                    <b>Build started</b> : ${"{0:dd/MM/yy HH:mm:ss}" -f [datetime]$build.startTime}     <br>
                    <b>Source Branch</b> : ${$build.sourceBranch}  <br>
                    <h3>Associated work items</h3>
                    @@WILOOP@@
                    <li>
                        <b>${$widetail.fields.'System.WorkItemType'} ${$widetail.id}</b> [Assigned by: ${$widetail.fields.'System.AssignedTo'}]     ${$widetail.fields.'System.Title'}
                    </li>
                    @@WILOOP@@
                    <h3>Associated change sets/commits</h3>
                    @@CSLOOP@@
                    <li>
                        <b>ID ${$csdetail.changesetid}${$csdetail.commitid}</b> ${$csdetail.comment}
                    </li>
                    <hr>
                    @@CSLOOP@@
        delimiter: ':'
        fieldEquality: '='
        anyFieldContent: '*'
          
    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

 #Below are deployment stages
- stage: 'Dev'
  displayName: 'Deploy to the dev environment'
  dependsOn: Build
  jobs:
  - deployment: Deploy
    pool: Default
    environment: dev

    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop



- stage: 'Test'
  displayName: 'Deploy to the test environment'
  dependsOn: Dev
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-16.04'
    environment: test
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

- stage: 'Staging'
  displayName: 'Deploy to the staging environment'
  dependsOn: Test
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-16.04'
    environment: staging
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
